线程状态
	线程共包括以下5种状态：

	1. 新建状态(New)     : 线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。
	2. 就绪状态(Runnable)	: 也被称为“可执行状态”。线程对象被创建后，其它线程调用了该对象的start()方法，从而来启动该线程。例如，thread.start()。处于就绪状态的线程，随时可能被CPU调度执行。
	3. 运行状态(Running) : 线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。
	4. 阻塞状态(Blocked) : 阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：
	    (01) 等待阻塞 -- 通过调用线程的wait()方法，让线程等待某工作的完成。
	    (02) 同步阻塞 -- 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。
	    (03) 其他阻塞 -- 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。
	5. 死亡状态(Dead)    : 线程执行完了或者因异常退出了run()方法，该线程结束生命周期。

常用的实现多线程的两种方式
	Thread，Runnable

	1，Runnable 是一个接口，该接口中只包含了一个run()方法。它的定义如下：
	public interface Runnable {
    	public abstract void run();
	}
	Runnable的作用，实现多线程。我们可以定义一个类A实现Runnable接口；然后，通过new Thread(new A())等方式新建线程。

	2，Thread 是一个类。Thread本身就实现了Runnable接口。它的声明如下：
	public class Thread implements Runnable {}
	Thread的作用，实现多线程。	

Thread start()和run()的区别
	start() : 它的作用是启动一个新线程，新线程会执行相应的run()方法。start()不能被重复调用。
	run()   : run()就和普通的成员方法一样，可以被重复调用。单独调用run()的话，会在当前线程中执行run()，而并不会启动新线程！

	thread.start() 会启动新线程，执行run()方法后，是在子线程中(比如在主线程中调用thread.start()，run()是执行在thread线程中)
	thread.run()   不会启动新县城，执行run()方法，还是在调用的线程中(比如在主线程调用thread.run()，run()还是执行在主线程中)	


join()方法
	join()是Thread类的一个方法。
	根据jdk文档的定义：public final void join()throws InterruptedException: Waits for this thread to die.
	join()方法的作用，是等待这个线程结束.

	thread.join()把指定的线程加入到当前线程，可以将两个交替执行的线程合并为顺序执行的线程。
	比如在线程B中调用了线程A的join()方法，直到线程A执行完毕后，才会继续执行线程B。

	t.join();      //调用join方法，等待线程t执行完毕
	t.join(1000);  //等待 t 线程，等待时间是1000毫秒。

synchronized关键字
	synchronized原理
		在java中，每一个对象有且仅有一个同步锁。这也意味着，同步锁是依赖于对象而存在。
		当我们调用某对象的synchronized方法时，就获取了该对象的同步锁。
		例如，synchronized(obj)就获取了“obj这个对象”的同步锁。
		不同线程对同步锁的访问是互斥的。
		也就是说，某时间点，对象的同步锁只能被一个线程获取到！通过同步锁，我们就能在多线程中，实现对“对象/方法”的互斥访问。
		例如，现在有两个线程A和线程B，它们都会访问“对象obj的同步锁”。假设，在某一时刻，线程A获取到“obj的同步锁”并在执行一些操作；而此时，线程B也企图获取“obj的同步锁” —— 线程B会获取失败，它必须等待，直到线程A释放了“该对象的同步锁”之后线程B才能获取到“obj的同步锁”从而才可以运行。

	synchronized基本规则
		第一条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的该“synchronized方法”或者“synchronized代码块”的访问将被阻塞。
		第二条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程仍然可以访问“该对象”的非同步代码块。
		第三条: 当一个线程访问“某对象”的“synchronized方法”或者“synchronized代码块”时，其他线程对“该对象”的其他的“synchronized方法”或者“synchronized代码块”的访问将被阻塞。		

Object相关方法：
	notify()        -- 唤醒在此对象监视器上等待的单个线程。

	notifyAll()   	-- 唤醒在此对象监视器上等待的所有线程。

	wait()          -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)。

	wait(long timeout)             -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过指定的时间量”，当前线程被唤醒(进入“就绪状态”)。

	wait(long timeout, int nanos)  -- 让当前线程处于“等待(阻塞)状态”，“直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者其他某个线程中断当前线程，或者已超过某个实际时间量”，当前线程被唤醒(进入“就绪状态”)。

	·对于wait方法的补充
		对于wait(long millis)方法，当millis为0时，表示无限等待，直到被notify()或notifyAll()唤醒

	·为什么wait(),notify(),notifyAll()定义在Object中，而不是Thread中
		notify(), wait()依赖于“同步锁”，而“同步锁”是对象锁持有，并且每个对象有且仅有一个！这就是为什么notify(), wait()等函数定义在Object类，而不是Thread类中的原因。（不是很懂）

interrupt()
	interrupt()的作用是中断本线程。

	本线程中断自己是被允许的；其它线程调用本线程的interrupt()方法时，会通过checkAccess()检查权限。这有可能抛出SecurityException异常。

	如果本线程是处于阻塞状态：调用线程的wait(), wait(long)或wait(long, int)会让它进入等待(阻塞)状态，或者调用线程的join(), join(long), join(long, int), sleep(long), sleep(long, int)也会让它进入阻塞状态。若线程在阻塞状态时，调用了它的interrupt()方法，那么它的“中断状态”会被清除并且会收到一个InterruptedException异常。例如，线程通过wait()进入阻塞状态，此时通过interrupt()中断该线程；调用interrupt()会立即将线程的中断标记设为“true”，但是由于线程处于阻塞状态，所以该“中断标记”会立即被清除为“false”，同时，会产生一个InterruptedException的异常
	如果线程被阻塞在一个Selector选择器中，那么通过interrupt()中断它时；线程的中断标记会被设置为true，并且它会立即从选择操作中返回。

	如果不属于前面所说的情况，那么通过interrupt()中断线程时，它的中断标记会被设置为“true”。

	线程处于“阻塞状态”和“运行状态”的终止方式，比较通用的终止线程的形式如下：
		@Override
		public void run() {
		    try {
		        // 1. isInterrupted()保证，只要中断标记为true就终止线程。
		        while (!isInterrupted()) {
		            // 执行任务...
		        }
		    } catch (InterruptedException ie) {  
		        // 2. InterruptedException异常保证，当InterruptedException异常产生时，线程被终止。
		    }
		}

java 中的线程优先级的范围是1～10，默认的优先级是5。“高优先级线程”会优先于“低优先级线程”执行。





