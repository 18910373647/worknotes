设计模式六大原则
软件编程的总的原则：低耦合，高内聚。

设计模式六大原则（1）：单一职责原则
	定义：不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。 
	问题由来：类T负责两个不同的职责：职责P1，职责P2。当由于职责P1需求发生改变而需要修改类T时，有可能会导致原本运行正常的职责P2功能发生故障。

	解决方案：遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。	
设计模式六大原则（2）：里氏替换原则
	氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下4层含义：

	子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
	子类中可以增加自己特有的方法。
	当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
	当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。

设计模式六大原则（3）：依赖倒置原则
	低层模块尽量都要有抽象类或接口，或者两者都有。
	变量的声明类型尽量是抽象类或接口。
	使用继承时遵循里氏替换原则。
	面向接口编程
设计模式六大原则（4）：接口隔离原则
	接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
	为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
	提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。
设计模式六大原则（5）：迪米特法则
	一个对象应该对其他对象保持最少的了解。
	迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖
设计模式六大原则（6）：开闭原则
	个软件实体如类、模块和函数应该对扩展开放，对修改关闭。

耦合的方式很多，依赖、关联、组合、聚合等。	

设计模式：
1，单例模式。
2，建造者模式。
3，适配者模式。
4，